//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TreeViewApproach
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RealTimePowerContext : DbContext
    {
        public RealTimePowerContext()
            : base("name=RealTimePowerContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AuxBoiler> AuxBoilers { get; set; }
        public virtual DbSet<Block> Blocks { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Chart> Charts { get; set; }
        public virtual DbSet<ChartFormat> ChartFormats { get; set; }
        public virtual DbSet<Cogeneration> Cogenerations { get; set; }
        public virtual DbSet<Condenser> Condensers { get; set; }
        public virtual DbSet<CondenserVariable> CondenserVariables { get; set; }
        public virtual DbSet<Display> Displays { get; set; }
        public virtual DbSet<Filter> Filters { get; set; }
        public virtual DbSet<GasTurbine> GasTurbines { get; set; }
        public virtual DbSet<GasTurbineType> GasTurbineTypes { get; set; }
        public virtual DbSet<Generator> Generators { get; set; }
        public virtual DbSet<GeneratorVariable> GeneratorVariables { get; set; }
        public virtual DbSet<Grid> Grids { get; set; }
        public virtual DbSet<HealthCheck> HealthChecks { get; set; }
        public virtual DbSet<HRSG> HRSGs { get; set; }
        public virtual DbSet<HRSGVariable> HRSGVariables { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<PlantObjectType> PlantObjectTypes { get; set; }
        public virtual DbSet<PlantVariable> PlantVariables { get; set; }
        public virtual DbSet<SentinelUser> SentinelUsers { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<SteamTurbine> SteamTurbines { get; set; }
        public virtual DbSet<SteamTurbineVariable> SteamTurbineVariables { get; set; }
        public virtual DbSet<TE> TES { get; set; }
        public virtual DbSet<TESVariable> TESVariables { get; set; }
        public virtual DbSet<UnitVariable> UnitVariables { get; set; }
        public virtual DbSet<BookDisplay> BookDisplays { get; set; }
        public virtual DbSet<ChartCategory> ChartCategories { get; set; }
        public virtual DbSet<ChartVariable> ChartVariables { get; set; }
        public virtual DbSet<CondenserAlia> CondenserAlias { get; set; }
        public virtual DbSet<DisplayObject> DisplayObjects { get; set; }
        public virtual DbSet<DisplayObjectType> DisplayObjectTypes { get; set; }
        public virtual DbSet<EngUnitsConversion> EngUnitsConversions { get; set; }
        public virtual DbSet<FilterCategory> FilterCategories { get; set; }
        public virtual DbSet<FilterTimeRange> FilterTimeRanges { get; set; }
        public virtual DbSet<FilterValueRange> FilterValueRanges { get; set; }
        public virtual DbSet<Forecast> Forecasts { get; set; }
        public virtual DbSet<ForecastArchive> ForecastArchives { get; set; }
        public virtual DbSet<ForecastSnapShot> ForecastSnapShots { get; set; }
        public virtual DbSet<ForecastType> ForecastTypes { get; set; }
        public virtual DbSet<ForecastTypeAlia> ForecastTypeAlias { get; set; }
        public virtual DbSet<ForecastValue> ForecastValues { get; set; }
        public virtual DbSet<GasTurbineAlia> GasTurbineAlias { get; set; }
        public virtual DbSet<GasTurbineVariable> GasTurbineVariables { get; set; }
        public virtual DbSet<GeneratorAlia> GeneratorAlias { get; set; }
        public virtual DbSet<GridCategory> GridCategories { get; set; }
        public virtual DbSet<GridHealthCheck> GridHealthChecks { get; set; }
        public virtual DbSet<GridVariable> GridVariables { get; set; }
        public virtual DbSet<HealthCheckCategory> HealthCheckCategories { get; set; }
        public virtual DbSet<HealthCheckCompare> HealthCheckCompares { get; set; }
        public virtual DbSet<HealthCheckFilter> HealthCheckFilters { get; set; }
        public virtual DbSet<HealthCheckReading> HealthCheckReadings { get; set; }
        public virtual DbSet<HRSGAlia> HRSGAlias { get; set; }
        public virtual DbSet<InletCoolingTypeAlia> InletCoolingTypeAlias { get; set; }
        public virtual DbSet<LayoutPanel> LayoutPanels { get; set; }
        public virtual DbSet<LayoutPanelCategory> LayoutPanelCategories { get; set; }
        public virtual DbSet<LayoutPanelObject> LayoutPanelObjects { get; set; }
        public virtual DbSet<LayoutPanelObjectVariable> LayoutPanelObjectVariables { get; set; }
        public virtual DbSet<MessageLog> MessageLogs { get; set; }
        public virtual DbSet<ModelCategory> ModelCategories { get; set; }
        public virtual DbSet<ModelInput> ModelInputs { get; set; }
        public virtual DbSet<ModelInputCoeff> ModelInputCoeffs { get; set; }
        public virtual DbSet<ModelTemplate> ModelTemplates { get; set; }
        public virtual DbSet<ModelTemplateCategory> ModelTemplateCategories { get; set; }
        public virtual DbSet<ModelTemplateInput> ModelTemplateInputs { get; set; }
        public virtual DbSet<PanelSetting> PanelSettings { get; set; }
        public virtual DbSet<PlantObjectTypeAlia> PlantObjectTypeAlias { get; set; }
        public virtual DbSet<SentinelUserActivity> SentinelUserActivities { get; set; }
        public virtual DbSet<Source> Sources { get; set; }
        public virtual DbSet<Summary> Summaries { get; set; }
        public virtual DbSet<SummaryType> SummaryTypes { get; set; }
        public virtual DbSet<SummaryValue> SummaryValues { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UpdateService> UpdateServices { get; set; }
        public virtual DbSet<Variable> Variables { get; set; }
        public virtual DbSet<VariableArchive> VariableArchives { get; set; }
        public virtual DbSet<VariableMaster> VariableMasters { get; set; }
        public virtual DbSet<VariablePoint> VariablePoints { get; set; }
        public virtual DbSet<VariablePointBackup> VariablePointBackups { get; set; }
        public virtual DbSet<VariablePointTemp> VariablePointTemps { get; set; }
        public virtual DbSet<VariableSnapshot> VariableSnapshots { get; set; }
        public virtual DbSet<VariableType> VariableTypes { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int BulkInsertModifyVariableForm(ObjectParameter resultMsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkInsertModifyVariableForm", resultMsg);
        }
    
        public virtual int BulkTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkTest");
        }
    
        public virtual int BulkUpdateModifyVariableForm(ObjectParameter resultMsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkUpdateModifyVariableForm", resultMsg);
        }
    
        public virtual ObjectResult<GetPlantVariableListByUnit_Result> GetPlantVariableListByUnit(Nullable<int> blockID)
        {
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPlantVariableListByUnit_Result>("GetPlantVariableListByUnit", blockIDParameter);
        }
    
        public virtual ObjectResult<string> usp_BindVariableModifyForm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_BindVariableModifyForm");
        }
    
        public virtual int usp_ChartVariableBetweenDates(Nullable<int> variableID, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ChartVariableBetweenDates", variableIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int usp_ConvertToModelForMultipleConversion(Nullable<int> blockID, Nullable<int> plantObjectID)
        {
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            var plantObjectIDParameter = plantObjectID.HasValue ?
                new ObjectParameter("PlantObjectID", plantObjectID) :
                new ObjectParameter("PlantObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ConvertToModelForMultipleConversion", blockIDParameter, plantObjectIDParameter);
        }
    
        public virtual int usp_CopyBook(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyBook", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CopyChart(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyChart", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CopyDisplay(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyDisplay", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CopyFilter(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyFilter", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CopyGridTable(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyGridTable", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual ObjectResult<string> usp_CopyHealthCheck(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CopyHealthCheck", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CopyModel(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyModel", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CopyModelTemplate(Nullable<int> objectID, Nullable<int> userID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyModelTemplate", objectIDParameter, userIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CopyVariable_obsolete(Nullable<int> objectID, string copyTag, ObjectParameter newObjectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var copyTagParameter = copyTag != null ?
                new ObjectParameter("CopyTag", copyTag) :
                new ObjectParameter("CopyTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyVariable_obsolete", objectIDParameter, copyTagParameter, newObjectID);
        }
    
        public virtual int usp_CreateNewBook(ObjectParameter newBookID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewBook", newBookID);
        }
    
        public virtual int usp_CreateNewCategory(string name, Nullable<int> position, Nullable<int> categoryID, Nullable<byte> userID, ObjectParameter newCategoryID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewCategory", nameParameter, positionParameter, categoryIDParameter, userIDParameter, newCategoryID);
        }
    
        public virtual int usp_CreateNewChart(ObjectParameter newChartID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewChart", newChartID);
        }
    
        public virtual int usp_CreateNewChartVariable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewChartVariable");
        }
    
        public virtual int usp_CreateNewDisplay(Nullable<int> userID, string name, Nullable<int> rows, Nullable<int> columns, Nullable<int> minRowHeight, Nullable<int> filterID, ObjectParameter newDisplayID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rowsParameter = rows.HasValue ?
                new ObjectParameter("Rows", rows) :
                new ObjectParameter("Rows", typeof(int));
    
            var columnsParameter = columns.HasValue ?
                new ObjectParameter("Columns", columns) :
                new ObjectParameter("Columns", typeof(int));
    
            var minRowHeightParameter = minRowHeight.HasValue ?
                new ObjectParameter("MinRowHeight", minRowHeight) :
                new ObjectParameter("MinRowHeight", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewDisplay", userIDParameter, nameParameter, rowsParameter, columnsParameter, minRowHeightParameter, filterIDParameter, newDisplayID);
        }
    
        public virtual int usp_CreateNewFilter(ObjectParameter newFilterID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewFilter", newFilterID);
        }
    
        public virtual int usp_CreateNewGrid(Nullable<int> userID, Nullable<int> type, string title, ObjectParameter newGridID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewGrid", userIDParameter, typeParameter, titleParameter, newGridID);
        }
    
        public virtual int usp_CreateNewHealthCheck(ObjectParameter newHealthCheckID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewHealthCheck", newHealthCheckID);
        }
    
        public virtual int usp_CreateNewLayoutPanel(Nullable<int> userID, string name, ObjectParameter newLayoutPanelID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewLayoutPanel", userIDParameter, nameParameter, newLayoutPanelID);
        }
    
        public virtual int usp_CreateNewModel(ObjectParameter newModelID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewModel", newModelID);
        }
    
        public virtual int usp_CreateNewModelTemplate(Nullable<int> modelID, Nullable<int> userID, ObjectParameter modelTemplateID, ObjectParameter variableMasterID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewModelTemplate", modelIDParameter, userIDParameter, modelTemplateID, variableMasterID);
        }
    
        public virtual int usp_CreateNewRelativeFilter(Nullable<int> userID, string name, Nullable<int> maxRows, Nullable<bool> relative, Nullable<int> start, Nullable<int> finish, ObjectParameter newFilterID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            var relativeParameter = relative.HasValue ?
                new ObjectParameter("Relative", relative) :
                new ObjectParameter("Relative", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var finishParameter = finish.HasValue ?
                new ObjectParameter("Finish", finish) :
                new ObjectParameter("Finish", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateNewRelativeFilter", userIDParameter, nameParameter, maxRowsParameter, relativeParameter, startParameter, finishParameter, newFilterID);
        }
    
        public virtual ObjectResult<usp_DataGridViewMasterVariable_Result> usp_DataGridViewMasterVariable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataGridViewMasterVariable_Result>("usp_DataGridViewMasterVariable");
        }
    
        public virtual ObjectResult<usp_DataGridviewModifyPlantVariable_Result> usp_DataGridviewModifyPlantVariable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataGridviewModifyPlantVariable_Result>("usp_DataGridviewModifyPlantVariable");
        }
    
        public virtual ObjectResult<usp_DataGridViewPlantVariableList_Result> usp_DataGridViewPlantVariableList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataGridViewPlantVariableList_Result>("usp_DataGridViewPlantVariableList");
        }
    
        public virtual ObjectResult<usp_DataGridViewVariableType_Result> usp_DataGridViewVariableType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataGridViewVariableType_Result>("usp_DataGridViewVariableType");
        }
    
        public virtual int usp_DeleteBook(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteBook", objectIDParameter);
        }
    
        public virtual int usp_DeleteCategory(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteCategory", categoryIDParameter);
        }
    
        public virtual int usp_DeleteChart(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteChart", objectIDParameter);
        }
    
        public virtual int usp_DeleteDisplay(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteDisplay", objectIDParameter);
        }
    
        public virtual int usp_DeleteDisplayObject(Nullable<int> displayID, Nullable<int> displayObjectID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            var displayObjectIDParameter = displayObjectID.HasValue ?
                new ObjectParameter("DisplayObjectID", displayObjectID) :
                new ObjectParameter("DisplayObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteDisplayObject", displayIDParameter, displayObjectIDParameter);
        }
    
        public virtual int usp_DeleteFilter(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteFilter", objectIDParameter);
        }
    
        public virtual int usp_DeleteHealthCheck(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteHealthCheck", objectIDParameter);
        }
    
        public virtual int usp_DeleteLayoutPanel(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteLayoutPanel", objectIDParameter);
        }
    
        public virtual int usp_DeleteModel(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteModel", objectIDParameter);
        }
    
        public virtual int usp_DeleteModelTemplate(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteModelTemplate", objectIDParameter);
        }
    
        public virtual int usp_DeleteUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteUser", userIDParameter);
        }
    
        public virtual int usp_DeleteVariable(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteVariable", objectIDParameter);
        }
    
        public virtual int usp_DeleteVariableFromGridTable(Nullable<int> gridID, Nullable<int> variableID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteVariableFromGridTable", gridIDParameter, variableIDParameter);
        }
    
        public virtual int usp_DeleteVariableTable(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteVariableTable", objectIDParameter);
        }
    
        public virtual int usp_FindAndDeleteDuplicatesInReadingTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FindAndDeleteDuplicatesInReadingTables");
        }
    
        public virtual ObjectResult<usp_GetActiveHealthChecks_Result> usp_GetActiveHealthChecks(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetActiveHealthChecks_Result>("usp_GetActiveHealthChecks", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBookDisplayList_Result> usp_GetBookDisplayList(Nullable<int> bookID, Nullable<int> userID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBookDisplayList_Result>("usp_GetBookDisplayList", bookIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBookList_Result> usp_GetBookList(Nullable<int> bookID, Nullable<int> userID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBookList_Result>("usp_GetBookList", bookIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCategoryList_Result> usp_GetCategoryList(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCategoryList_Result>("usp_GetCategoryList", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartAndChartVariables_Result> usp_GetChartAndChartVariables(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartAndChartVariables_Result>("usp_GetChartAndChartVariables", chartIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartDetails_Result> usp_GetChartDetails(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartDetails_Result>("usp_GetChartDetails", chartIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartInfo_Result> usp_GetChartInfo(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartInfo_Result>("usp_GetChartInfo", chartIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartInfowithFilter_Result> usp_GetChartInfowithFilter(Nullable<int> chartID, Nullable<int> filterId)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartInfowithFilter_Result>("usp_GetChartInfowithFilter", chartIDParameter, filterIdParameter);
        }
    
        public virtual ObjectResult<usp_GetChartList_Result> usp_GetChartList(Nullable<int> chartID, Nullable<int> userID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartList_Result>("usp_GetChartList", chartIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartListQuick_Result> usp_GetChartListQuick(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartListQuick_Result>("usp_GetChartListQuick", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartRealTimeValues_Result> usp_GetChartRealTimeValues(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartRealTimeValues_Result>("usp_GetChartRealTimeValues", chartIDParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> usp_GetChartType(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("usp_GetChartType", chartIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartVariable_Result> usp_GetChartVariable(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartVariable_Result>("usp_GetChartVariable", chartIDParameter);
        }
    
        public virtual ObjectResult<usp_GetChartVariableList_Result> usp_GetChartVariableList(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartVariableList_Result>("usp_GetChartVariableList", chartIDParameter);
        }
    
        public virtual int usp_GetChartVariableValuesWithNoFilter(Nullable<int> chartID, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetChartVariableValuesWithNoFilter", chartIDParameter, date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<usp_GetChartWithFilter_Result> usp_GetChartWithFilter(Nullable<int> chartID, Nullable<int> filterId)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChartWithFilter_Result>("usp_GetChartWithFilter", chartIDParameter, filterIdParameter);
        }
    
        public virtual int usp_GetCLRVariableHistoryWithFilter(Nullable<int> variableID, Nullable<int> filterID, Nullable<int> interval, Nullable<System.DateTimeOffset> tmin, Nullable<System.DateTimeOffset> tmax)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var tminParameter = tmin.HasValue ?
                new ObjectParameter("Tmin", tmin) :
                new ObjectParameter("Tmin", typeof(System.DateTimeOffset));
    
            var tmaxParameter = tmax.HasValue ?
                new ObjectParameter("Tmax", tmax) :
                new ObjectParameter("Tmax", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetCLRVariableHistoryWithFilter", variableIDParameter, filterIDParameter, intervalParameter, tminParameter, tmaxParameter);
        }
    
        public virtual int usp_GetDataByChartID(Nullable<int> chartID, Nullable<int> filterID, Nullable<System.DateTime> tmax, Nullable<System.DateTime> tmin)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var tmaxParameter = tmax.HasValue ?
                new ObjectParameter("Tmax", tmax) :
                new ObjectParameter("Tmax", typeof(System.DateTime));
    
            var tminParameter = tmin.HasValue ?
                new ObjectParameter("Tmin", tmin) :
                new ObjectParameter("Tmin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetDataByChartID", chartIDParameter, filterIDParameter, tmaxParameter, tminParameter);
        }
    
        public virtual ObjectResult<usp_GetDisplay_Result> usp_GetDisplay(Nullable<int> displayID, Nullable<int> userID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDisplay_Result>("usp_GetDisplay", displayIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetDisplayDetails_Result> usp_GetDisplayDetails(Nullable<int> displayID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDisplayDetails_Result>("usp_GetDisplayDetails", displayIDParameter);
        }
    
        public virtual ObjectResult<usp_GetDisplayObject_Result> usp_GetDisplayObject(Nullable<int> displayID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDisplayObject_Result>("usp_GetDisplayObject", displayIDParameter);
        }
    
        public virtual ObjectResult<usp_GetDisplayObjectDetails_Result> usp_GetDisplayObjectDetails(Nullable<int> displayID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDisplayObjectDetails_Result>("usp_GetDisplayObjectDetails", displayIDParameter);
        }
    
        public virtual ObjectResult<usp_GetDisplayObjectListsByUserID_Result> usp_GetDisplayObjectListsByUserID(Nullable<int> userID, string type, Nullable<bool> getUserList)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var getUserListParameter = getUserList.HasValue ?
                new ObjectParameter("GetUserList", getUserList) :
                new ObjectParameter("GetUserList", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDisplayObjectListsByUserID_Result>("usp_GetDisplayObjectListsByUserID", userIDParameter, typeParameter, getUserListParameter);
        }
    
        public virtual int usp_GetDisplayObjectName(Nullable<int> displayObjectID, Nullable<int> displayObjectTypeID, ObjectParameter displayObjectName)
        {
            var displayObjectIDParameter = displayObjectID.HasValue ?
                new ObjectParameter("DisplayObjectID", displayObjectID) :
                new ObjectParameter("DisplayObjectID", typeof(int));
    
            var displayObjectTypeIDParameter = displayObjectTypeID.HasValue ?
                new ObjectParameter("DisplayObjectTypeID", displayObjectTypeID) :
                new ObjectParameter("DisplayObjectTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetDisplayObjectName", displayObjectIDParameter, displayObjectTypeIDParameter, displayObjectName);
        }
    
        public virtual ObjectResult<usp_GetFilterDetails_Result> usp_GetFilterDetails(Nullable<int> filterID, Nullable<int> userID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFilterDetails_Result>("usp_GetFilterDetails", filterIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetFilterDetailsToView_Result> usp_GetFilterDetailsToView(Nullable<int> filterID, Nullable<int> userID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFilterDetailsToView_Result>("usp_GetFilterDetailsToView", filterIDParameter, userIDParameter);
        }
    
        public virtual int usp_GetFilterIDByName(Nullable<int> userID, string name, ObjectParameter filterID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetFilterIDByName", userIDParameter, nameParameter, filterID);
        }
    
        public virtual ObjectResult<usp_GetFilterList_Result> usp_GetFilterList(Nullable<int> filterID, Nullable<int> userID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFilterList_Result>("usp_GetFilterList", filterIDParameter, userIDParameter);
        }
    
        public virtual int usp_GetFilterName(Nullable<int> filterID, ObjectParameter filterName)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetFilterName", filterIDParameter, filterName);
        }
    
        public virtual ObjectResult<usp_GetFilterTimeRange_Result> usp_GetFilterTimeRange(Nullable<int> filterID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFilterTimeRange_Result>("usp_GetFilterTimeRange", filterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetFilterValueandTime_Result> usp_GetFilterValueandTime(Nullable<int> filterID, Nullable<int> userID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFilterValueandTime_Result>("usp_GetFilterValueandTime", filterIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetFilterValueRange_Result> usp_GetFilterValueRange(Nullable<int> filterID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFilterValueRange_Result>("usp_GetFilterValueRange", filterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetForecastValuesByDateTime_Result> usp_GetForecastValuesByDateTime(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> forecastID)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            var forecastIDParameter = forecastID.HasValue ?
                new ObjectParameter("ForecastID", forecastID) :
                new ObjectParameter("ForecastID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetForecastValuesByDateTime_Result>("usp_GetForecastValuesByDateTime", startParameter, endParameter, forecastIDParameter);
        }
    
        public virtual ObjectResult<usp_GetForecastValuesByVariableID_Result> usp_GetForecastValuesByVariableID(Nullable<int> variableID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetForecastValuesByVariableID_Result>("usp_GetForecastValuesByVariableID", variableIDParameter);
        }
    
        public virtual ObjectResult<usp_GetFullModelComparisonTables_Result> usp_GetFullModelComparisonTables(Nullable<int> modelID, Nullable<int> filterID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFullModelComparisonTables_Result>("usp_GetFullModelComparisonTables", modelIDParameter, filterIDParameter);
        }
    
        public virtual int usp_GetGasTurbineData(Nullable<int> variableId, Nullable<System.DateTimeOffset> sd, Nullable<System.DateTimeOffset> ed, Nullable<int> mins)
        {
            var variableIdParameter = variableId.HasValue ?
                new ObjectParameter("variableId", variableId) :
                new ObjectParameter("variableId", typeof(int));
    
            var sdParameter = sd.HasValue ?
                new ObjectParameter("sd", sd) :
                new ObjectParameter("sd", typeof(System.DateTimeOffset));
    
            var edParameter = ed.HasValue ?
                new ObjectParameter("ed", ed) :
                new ObjectParameter("ed", typeof(System.DateTimeOffset));
    
            var minsParameter = mins.HasValue ?
                new ObjectParameter("mins", mins) :
                new ObjectParameter("mins", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetGasTurbineData", variableIdParameter, sdParameter, edParameter, minsParameter);
        }
    
        public virtual ObjectResult<usp_GetGridHealthCheckData_Result> usp_GetGridHealthCheckData(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("objectID", objectID) :
                new ObjectParameter("objectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridHealthCheckData_Result>("usp_GetGridHealthCheckData", objectIDParameter);
        }
    
        public virtual ObjectResult<usp_GetGridHealthCheckInfo_Result> usp_GetGridHealthCheckInfo(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridHealthCheckInfo_Result>("usp_GetGridHealthCheckInfo", gridIDParameter);
        }
    
        public virtual ObjectResult<usp_GetGridHealthChecksForDisplay_Result> usp_GetGridHealthChecksForDisplay(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridHealthChecksForDisplay_Result>("usp_GetGridHealthChecksForDisplay", gridIDParameter);
        }
    
        public virtual int usp_GetGridInfo(Nullable<int> gridID, ObjectParameter type)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetGridInfo", gridIDParameter, type);
        }
    
        public virtual ObjectResult<usp_GetGridList_Result> usp_GetGridList(Nullable<int> gridID, Nullable<int> userID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridList_Result>("usp_GetGridList", gridIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetGridListForModifyForm_Result> usp_GetGridListForModifyForm(Nullable<int> gridID, Nullable<int> objectID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridListForModifyForm_Result>("usp_GetGridListForModifyForm", gridIDParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<usp_GetGridTableForGridControl_Result> usp_GetGridTableForGridControl(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridTableForGridControl_Result>("usp_GetGridTableForGridControl", gridIDParameter);
        }
    
        public virtual ObjectResult<usp_GetGridVariableInfo_Result> usp_GetGridVariableInfo(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridVariableInfo_Result>("usp_GetGridVariableInfo", gridIDParameter);
        }
    
        public virtual ObjectResult<usp_GetGridVariablesForDisplay_Result> usp_GetGridVariablesForDisplay(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGridVariablesForDisplay_Result>("usp_GetGridVariablesForDisplay", gridIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckFilter_Result> usp_GetHealthCheckFilter(Nullable<int> filterID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckFilter_Result>("usp_GetHealthCheckFilter", filterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckHistoryForChart_Result> usp_GetHealthCheckHistoryForChart(Nullable<System.DateTimeOffset> start, Nullable<System.DateTimeOffset> end, Nullable<int> healthCheckID, Nullable<int> filterID)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTimeOffset));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTimeOffset));
    
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckHistoryForChart_Result>("usp_GetHealthCheckHistoryForChart", startParameter, endParameter, healthCheckIDParameter, filterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckHistoryForGrid_Result> usp_GetHealthCheckHistoryForGrid(Nullable<System.DateTimeOffset> start, Nullable<System.DateTimeOffset> end, Nullable<int> userID)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTimeOffset));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTimeOffset));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckHistoryForGrid_Result>("usp_GetHealthCheckHistoryForGrid", startParameter, endParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckList_Result> usp_GetHealthCheckList(Nullable<int> healthCheckID, Nullable<int> userID)
        {
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckList_Result>("usp_GetHealthCheckList", healthCheckIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckListandModel_Result> usp_GetHealthCheckListandModel(Nullable<int> userID, Nullable<int> healthCheckID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckListandModel_Result>("usp_GetHealthCheckListandModel", userIDParameter, healthCheckIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckModelAndFilterName_Result> usp_GetHealthCheckModelAndFilterName(Nullable<int> modelID, Nullable<int> healthCheckID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckModelAndFilterName_Result>("usp_GetHealthCheckModelAndFilterName", modelIDParameter, healthCheckIDParameter);
        }
    
        public virtual int usp_GetHealthCheckReadingTableData(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetHealthCheckReadingTableData", date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckRealTimeInfo_Result> usp_GetHealthCheckRealTimeInfo(Nullable<int> healthCheckID)
        {
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckRealTimeInfo_Result>("usp_GetHealthCheckRealTimeInfo", healthCheckIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckRealTimeValues_Result> usp_GetHealthCheckRealTimeValues(Nullable<int> healthCheckID)
        {
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckRealTimeValues_Result>("usp_GetHealthCheckRealTimeValues", healthCheckIDParameter);
        }
    
        public virtual int usp_GetHealthCheckRealTimeValuesDataTableInput()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetHealthCheckRealTimeValuesDataTableInput");
        }
    
        public virtual ObjectResult<usp_GetHealthChecksActive_Result> usp_GetHealthChecksActive(Nullable<int> userID, Nullable<bool> alertStatus)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var alertStatusParameter = alertStatus.HasValue ?
                new ObjectParameter("AlertStatus", alertStatus) :
                new ObjectParameter("AlertStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthChecksActive_Result>("usp_GetHealthChecksActive", userIDParameter, alertStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthChecksByEquipmentType_Result> usp_GetHealthChecksByEquipmentType(Nullable<System.DateTimeOffset> start, Nullable<System.DateTimeOffset> end, Nullable<int> userID)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTimeOffset));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTimeOffset));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthChecksByEquipmentType_Result>("usp_GetHealthChecksByEquipmentType", startParameter, endParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthChecksInAlert_Result> usp_GetHealthChecksInAlert(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthChecksInAlert_Result>("usp_GetHealthChecksInAlert", gridIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthChecksLastHours_Result> usp_GetHealthChecksLastHours(Nullable<decimal> hours, Nullable<int> userID)
        {
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthChecksLastHours_Result>("usp_GetHealthChecksLastHours", hoursParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthChecksVisibleForUser_Result> usp_GetHealthChecksVisibleForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthChecksVisibleForUser_Result>("usp_GetHealthChecksVisibleForUser", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckTable_Result> usp_GetHealthCheckTable(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckTable_Result>("usp_GetHealthCheckTable", gridIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckToModify_Result> usp_GetHealthCheckToModify(Nullable<int> healthCheckID)
        {
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckToModify_Result>("usp_GetHealthCheckToModify", healthCheckIDParameter);
        }
    
        public virtual ObjectResult<usp_GetHealthCheckVariation_Result> usp_GetHealthCheckVariation(Nullable<decimal> days, Nullable<int> healthCheckID)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(decimal));
    
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHealthCheckVariation_Result>("usp_GetHealthCheckVariation", daysParameter, healthCheckIDParameter);
        }
    
        public virtual ObjectResult<usp_GetLayoutPanelDetails_Result> usp_GetLayoutPanelDetails(Nullable<int> layoutPanelID, Nullable<int> layoutPanelObjectID)
        {
            var layoutPanelIDParameter = layoutPanelID.HasValue ?
                new ObjectParameter("LayoutPanelID", layoutPanelID) :
                new ObjectParameter("LayoutPanelID", typeof(int));
    
            var layoutPanelObjectIDParameter = layoutPanelObjectID.HasValue ?
                new ObjectParameter("LayoutPanelObjectID", layoutPanelObjectID) :
                new ObjectParameter("LayoutPanelObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLayoutPanelDetails_Result>("usp_GetLayoutPanelDetails", layoutPanelIDParameter, layoutPanelObjectIDParameter);
        }
    
        public virtual ObjectResult<usp_GetLayoutPanelList_Result> usp_GetLayoutPanelList(Nullable<int> layoutPanelID, Nullable<int> userID)
        {
            var layoutPanelIDParameter = layoutPanelID.HasValue ?
                new ObjectParameter("LayoutPanelID", layoutPanelID) :
                new ObjectParameter("LayoutPanelID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLayoutPanelList_Result>("usp_GetLayoutPanelList", layoutPanelIDParameter, userIDParameter);
        }
    
        public virtual int usp_GetLayoutPanelVariableValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetLayoutPanelVariableValues");
        }
    
        public virtual ObjectResult<usp_GetMessageLog_Result> usp_GetMessageLog(Nullable<int> logID)
        {
            var logIDParameter = logID.HasValue ?
                new ObjectParameter("LogID", logID) :
                new ObjectParameter("LogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMessageLog_Result>("usp_GetMessageLog", logIDParameter);
        }
    
        public virtual int usp_GetMinMaxAvgBetweenDates(Nullable<int> variableID, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetMinMaxAvgBetweenDates", variableIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_GetModelAndCoeffs_Result> usp_GetModelAndCoeffs(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelAndCoeffs_Result>("usp_GetModelAndCoeffs", modelIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelAndFilterDetails_Result> usp_GetModelAndFilterDetails(Nullable<int> modelID, Nullable<int> filterID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelAndFilterDetails_Result>("usp_GetModelAndFilterDetails", modelIDParameter, filterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelComparisonTables_Result> usp_GetModelComparisonTables(Nullable<int> modelID, Nullable<int> filterID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelComparisonTables_Result>("usp_GetModelComparisonTables", modelIDParameter, filterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelDashBoard_Result> usp_GetModelDashBoard(Nullable<int> modelID, Nullable<int> userID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelDashBoard_Result>("usp_GetModelDashBoard", modelIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelDataForModelTemplate_Result> usp_GetModelDataForModelTemplate(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelDataForModelTemplate_Result>("usp_GetModelDataForModelTemplate", modelIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelInfoToPlot_Result> usp_GetModelInfoToPlot(Nullable<int> modelID, Nullable<int> filterID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelInfoToPlot_Result>("usp_GetModelInfoToPlot", modelIDParameter, filterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelInput_Result> usp_GetModelInput(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelInput_Result>("usp_GetModelInput", modelIDParameter);
        }
    
        public virtual int usp_GetModelInputCoeff(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetModelInputCoeff", modelIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelInputCurrentValues_Result> usp_GetModelInputCurrentValues(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelInputCurrentValues_Result>("usp_GetModelInputCurrentValues", modelIDParameter);
        }
    
        public virtual int usp_GetModelInputReadingTableDataByModelID(Nullable<int> modelID, Nullable<int> healthCheckID, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetModelInputReadingTableDataByModelID", modelIDParameter, healthCheckIDParameter, date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<usp_GetModelInputsForCreateModelFromTemplateForm_Result> usp_GetModelInputsForCreateModelFromTemplateForm(Nullable<int> objectID, string type)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelInputsForCreateModelFromTemplateForm_Result>("usp_GetModelInputsForCreateModelFromTemplateForm", objectIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<usp_GetModelInputsFromModeledVariableTemplate_Result> usp_GetModelInputsFromModeledVariableTemplate(Nullable<int> modelTemplateID, Nullable<int> modeledVariableID)
        {
            var modelTemplateIDParameter = modelTemplateID.HasValue ?
                new ObjectParameter("ModelTemplateID", modelTemplateID) :
                new ObjectParameter("ModelTemplateID", typeof(int));
    
            var modeledVariableIDParameter = modeledVariableID.HasValue ?
                new ObjectParameter("ModeledVariableID", modeledVariableID) :
                new ObjectParameter("ModeledVariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelInputsFromModeledVariableTemplate_Result>("usp_GetModelInputsFromModeledVariableTemplate", modelTemplateIDParameter, modeledVariableIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelList_Result> usp_GetModelList(Nullable<int> modelID, Nullable<int> userID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelList_Result>("usp_GetModelList", modelIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelsAllowedOnChart_Result> usp_GetModelsAllowedOnChart(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelsAllowedOnChart_Result>("usp_GetModelsAllowedOnChart", chartIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelsByModeledVariableID_Result> usp_GetModelsByModeledVariableID(Nullable<int> variableID, Nullable<int> userID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelsByModeledVariableID_Result>("usp_GetModelsByModeledVariableID", variableIDParameter, userIDParameter);
        }
    
        public virtual int usp_GetModelsWithRelativeFilters(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetModelsWithRelativeFilters", modelIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelTemplateFormData_Result> usp_GetModelTemplateFormData(Nullable<int> modelTemplateId)
        {
            var modelTemplateIdParameter = modelTemplateId.HasValue ?
                new ObjectParameter("ModelTemplateId", modelTemplateId) :
                new ObjectParameter("ModelTemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelTemplateFormData_Result>("usp_GetModelTemplateFormData", modelTemplateIdParameter);
        }
    
        public virtual int usp_GetModelVariablesAndFilter(Nullable<int> modeledVariable, Nullable<int> filterID, Nullable<int> compareFilterID)
        {
            var modeledVariableParameter = modeledVariable.HasValue ?
                new ObjectParameter("ModeledVariable", modeledVariable) :
                new ObjectParameter("ModeledVariable", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var compareFilterIDParameter = compareFilterID.HasValue ?
                new ObjectParameter("CompareFilterID", compareFilterID) :
                new ObjectParameter("CompareFilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetModelVariablesAndFilter", modeledVariableParameter, filterIDParameter, compareFilterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModelWhatIfFormTables_Result> usp_GetModelWhatIfFormTables(Nullable<int> modelID, Nullable<int> userID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModelWhatIfFormTables_Result>("usp_GetModelWhatIfFormTables", modelIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetModifyFilterFormTables_Result> usp_GetModifyFilterFormTables(Nullable<int> filterID, Nullable<int> userID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetModifyFilterFormTables_Result>("usp_GetModifyFilterFormTables", filterIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNewVariableForGridList_Result> usp_GetNewVariableForGridList(Nullable<int> type, Nullable<int> objectID)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNewVariableForGridList_Result>("usp_GetNewVariableForGridList", typeParameter, objectIDParameter);
        }
    
        public virtual int usp_GetNumberOfConnections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetNumberOfConnections");
        }
    
        public virtual ObjectResult<usp_GetObjectCategoryByUserID_Result> usp_GetObjectCategoryByUserID(Nullable<int> userID, string type, Nullable<bool> getCatList)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var getCatListParameter = getCatList.HasValue ?
                new ObjectParameter("GetCatList", getCatList) :
                new ObjectParameter("GetCatList", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetObjectCategoryByUserID_Result>("usp_GetObjectCategoryByUserID", userIDParameter, typeParameter, getCatListParameter);
        }
    
        public virtual ObjectResult<usp_GetObjectListsByUserID_Result> usp_GetObjectListsByUserID(Nullable<int> userID, string type, Nullable<bool> getUserList)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var getUserListParameter = getUserList.HasValue ?
                new ObjectParameter("GetUserList", getUserList) :
                new ObjectParameter("GetUserList", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetObjectListsByUserID_Result>("usp_GetObjectListsByUserID", userIDParameter, typeParameter, getUserListParameter);
        }
    
        public virtual ObjectResult<usp_GetObjectSelectionFormData_Result> usp_GetObjectSelectionFormData(Nullable<int> userID, string type, Nullable<bool> getUserList)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var getUserListParameter = getUserList.HasValue ?
                new ObjectParameter("GetUserList", getUserList) :
                new ObjectParameter("GetUserList", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetObjectSelectionFormData_Result>("usp_GetObjectSelectionFormData", userIDParameter, typeParameter, getUserListParameter);
        }
    
        public virtual ObjectResult<usp_GetOpenConnectionTypes_Result> usp_GetOpenConnectionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOpenConnectionTypes_Result>("usp_GetOpenConnectionTypes");
        }
    
        public virtual ObjectResult<usp_GetPanelSettings_Result> usp_GetPanelSettings(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPanelSettings_Result>("usp_GetPanelSettings", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPlantObjects_Result> usp_GetPlantObjects(Nullable<int> plantObjectTypeID, Nullable<int> siteID, Nullable<int> blockID)
        {
            var plantObjectTypeIDParameter = plantObjectTypeID.HasValue ?
                new ObjectParameter("PlantObjectTypeID", plantObjectTypeID) :
                new ObjectParameter("PlantObjectTypeID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPlantObjects_Result>("usp_GetPlantObjects", plantObjectTypeIDParameter, siteIDParameter, blockIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPlantObjectType_Result> usp_GetPlantObjectType(Nullable<int> plantObjectTypeID)
        {
            var plantObjectTypeIDParameter = plantObjectTypeID.HasValue ?
                new ObjectParameter("PlantObjectTypeID", plantObjectTypeID) :
                new ObjectParameter("PlantObjectTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPlantObjectType_Result>("usp_GetPlantObjectType", plantObjectTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPlantObjectVariables_Result> usp_GetPlantObjectVariables(Nullable<int> plantObjectVariableID, Nullable<int> blockID)
        {
            var plantObjectVariableIDParameter = plantObjectVariableID.HasValue ?
                new ObjectParameter("PlantObjectVariableID", plantObjectVariableID) :
                new ObjectParameter("PlantObjectVariableID", typeof(int));
    
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPlantObjectVariables_Result>("usp_GetPlantObjectVariables", plantObjectVariableIDParameter, blockIDParameter);
        }
    
        public virtual int usp_GetReadingTableData(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetReadingTableData", date1Parameter, date2Parameter);
        }
    
        public virtual int usp_GetReadingTableDataByGridID(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> gridID)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetReadingTableDataByGridID", date1Parameter, date2Parameter, gridIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReadingTableDataByHealthCheckID_Result> usp_GetReadingTableDataByHealthCheckID(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> healthCheckID)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReadingTableDataByHealthCheckID_Result>("usp_GetReadingTableDataByHealthCheckID", date1Parameter, date2Parameter, healthCheckIDParameter);
        }
    
        public virtual int usp_GetReadingTableDataByVariableIDList(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetReadingTableDataByVariableIDList", date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetReadingTableDataForRelativeTimeModels(Nullable<int> modelID, Nullable<int> filterID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetReadingTableDataForRelativeTimeModels", modelIDParameter, filterIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> usp_GetReadingTableRowCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("usp_GetReadingTableRowCount");
        }
    
        public virtual int usp_GetReadingTableValues(string filterString, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var filterStringParameter = filterString != null ?
                new ObjectParameter("FilterString", filterString) :
                new ObjectParameter("FilterString", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetReadingTableValues", filterStringParameter, date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<usp_GetRecentHealthChecks_Result> usp_GetRecentHealthChecks(Nullable<decimal> hour, Nullable<int> userID)
        {
            var hourParameter = hour.HasValue ?
                new ObjectParameter("Hour", hour) :
                new ObjectParameter("Hour", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecentHealthChecks_Result>("usp_GetRecentHealthChecks", hourParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSimilarVariable_Result> usp_GetSimilarVariable(Nullable<int> variableID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSimilarVariable_Result>("usp_GetSimilarVariable", variableIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSimilarVariableFromVariablePoint_Result> usp_GetSimilarVariableFromVariablePoint(Nullable<int> variableMasterID)
        {
            var variableMasterIDParameter = variableMasterID.HasValue ?
                new ObjectParameter("VariableMasterID", variableMasterID) :
                new ObjectParameter("VariableMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSimilarVariableFromVariablePoint_Result>("usp_GetSimilarVariableFromVariablePoint", variableMasterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSimilarVariablesFromVariableMaster_Result> usp_GetSimilarVariablesFromVariableMaster(Nullable<int> variableID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSimilarVariablesFromVariableMaster_Result>("usp_GetSimilarVariablesFromVariableMaster", variableIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTableList_Result> usp_GetTableList(Nullable<int> gridID, Nullable<int> userID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTableList_Result>("usp_GetTableList", gridIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTop5Alerts_Result> usp_GetTop5Alerts(Nullable<int> hours, Nullable<int> userID)
        {
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTop5Alerts_Result>("usp_GetTop5Alerts", hoursParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetUnitList_Result> usp_GetUnitList(Nullable<int> blockID)
        {
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUnitList_Result>("usp_GetUnitList", blockIDParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> usp_GetUserAccessLevel(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("usp_GetUserAccessLevel", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetUserActivityHistory_Result> usp_GetUserActivityHistory(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserActivityHistory_Result>("usp_GetUserActivityHistory", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetUserID(string userDomainName, string userName)
        {
            var userDomainNameParameter = userDomainName != null ?
                new ObjectParameter("UserDomainName", userDomainName) :
                new ObjectParameter("UserDomainName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetUserID", userDomainNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<usp_GetUserInfo_Result> usp_GetUserInfo(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserInfo_Result>("usp_GetUserInfo", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetUserList_Result> usp_GetUserList(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserList_Result>("usp_GetUserList", userIDParameter);
        }
    
        public virtual int usp_GetValuesBetweenDates(Nullable<int> variableID, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetValuesBetweenDates", variableIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int usp_GetValuesByChartIDAndFilterID(Nullable<int> variableID, Nullable<int> filterID, Nullable<System.DateTimeOffset> tmaxIn, Nullable<System.DateTimeOffset> tminIn, ObjectParameter tmax, ObjectParameter tmin, Nullable<int> interval)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var tmaxInParameter = tmaxIn.HasValue ?
                new ObjectParameter("TmaxIn", tmaxIn) :
                new ObjectParameter("TmaxIn", typeof(System.DateTimeOffset));
    
            var tminInParameter = tminIn.HasValue ?
                new ObjectParameter("TminIn", tminIn) :
                new ObjectParameter("TminIn", typeof(System.DateTimeOffset));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetValuesByChartIDAndFilterID", variableIDParameter, filterIDParameter, tmaxInParameter, tminInParameter, tmax, tmin, intervalParameter);
        }
    
        public virtual int usp_GetValuesByFilter(Nullable<int> variableID, string filterTimeRange, string filterValueRange)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var filterTimeRangeParameter = filterTimeRange != null ?
                new ObjectParameter("FilterTimeRange", filterTimeRange) :
                new ObjectParameter("FilterTimeRange", typeof(string));
    
            var filterValueRangeParameter = filterValueRange != null ?
                new ObjectParameter("FilterValueRange", filterValueRange) :
                new ObjectParameter("FilterValueRange", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetValuesByFilter", variableIDParameter, filterTimeRangeParameter, filterValueRangeParameter);
        }
    
        public virtual int usp_GetValuesByVariableIDAndFilterID(Nullable<int> variableID, Nullable<int> filterID, Nullable<System.DateTimeOffset> tmaxIn, Nullable<System.DateTimeOffset> tminIn, ObjectParameter tmax, ObjectParameter tmin, Nullable<int> interval)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var tmaxInParameter = tmaxIn.HasValue ?
                new ObjectParameter("TmaxIn", tmaxIn) :
                new ObjectParameter("TmaxIn", typeof(System.DateTimeOffset));
    
            var tminInParameter = tminIn.HasValue ?
                new ObjectParameter("TminIn", tminIn) :
                new ObjectParameter("TminIn", typeof(System.DateTimeOffset));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetValuesByVariableIDAndFilterID", variableIDParameter, filterIDParameter, tmaxInParameter, tminInParameter, tmax, tmin, intervalParameter);
        }
    
        public virtual ObjectResult<usp_GetVariable_Result> usp_GetVariable(Nullable<int> gridID, Nullable<int> objectID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariable_Result>("usp_GetVariable", gridIDParameter, objectIDParameter);
        }
    
        public virtual int usp_GetVariableAndFilterReadingInfo(Nullable<int> filterId)
        {
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetVariableAndFilterReadingInfo", filterIdParameter);
        }
    
        public virtual ObjectResult<usp_GetVariableBuilder_Result> usp_GetVariableBuilder(Nullable<int> variableID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableBuilder_Result>("usp_GetVariableBuilder", variableIDParameter);
        }
    
        public virtual ObjectResult<usp_GetVariableDetail_Result> usp_GetVariableDetail(Nullable<int> variableID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableDetail_Result>("usp_GetVariableDetail", variableIDParameter);
        }
    
        public virtual int usp_GetVariableDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetVariableDetails");
        }
    
        public virtual ObjectResult<usp_GetVariableForModifyFilterForm_Result> usp_GetVariableForModifyFilterForm(Nullable<int> variableID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableForModifyFilterForm_Result>("usp_GetVariableForModifyFilterForm", variableIDParameter);
        }
    
        public virtual ObjectResult<usp_GetVariableList_Result> usp_GetVariableList(Nullable<int> variableID, Nullable<int> blockID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableList_Result>("usp_GetVariableList", variableIDParameter, blockIDParameter);
        }
    
        public virtual ObjectResult<usp_GetVariableListByBlock_Result> usp_GetVariableListByBlock(Nullable<int> blockID)
        {
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableListByBlock_Result>("usp_GetVariableListByBlock", blockIDParameter);
        }
    
        public virtual int usp_GetVariableMasterIdFromModelTemplate(Nullable<int> modelTemplateID, ObjectParameter variableMasterID)
        {
            var modelTemplateIDParameter = modelTemplateID.HasValue ?
                new ObjectParameter("ModelTemplateID", modelTemplateID) :
                new ObjectParameter("ModelTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetVariableMasterIdFromModelTemplate", modelTemplateIDParameter, variableMasterID);
        }
    
        public virtual ObjectResult<usp_GetVariableMasterList_Result> usp_GetVariableMasterList(Nullable<int> variableMasterID)
        {
            var variableMasterIDParameter = variableMasterID.HasValue ?
                new ObjectParameter("VariableMasterID", variableMasterID) :
                new ObjectParameter("VariableMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableMasterList_Result>("usp_GetVariableMasterList", variableMasterIDParameter);
        }
    
        public virtual ObjectResult<usp_GetVariableSummaryDetail_Result> usp_GetVariableSummaryDetail(Nullable<int> variableID, Nullable<int> blockID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableSummaryDetail_Result>("usp_GetVariableSummaryDetail", variableIDParameter, blockIDParameter);
        }
    
        public virtual ObjectResult<usp_GetVariableType_Result> usp_GetVariableType(Nullable<int> variableTypeID)
        {
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVariableType_Result>("usp_GetVariableType", variableTypeIDParameter);
        }
    
        public virtual int usp_GetVariableValuesBetweenDatesFromTable(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetVariableValuesBetweenDatesFromTable", date1Parameter, date2Parameter);
        }
    
        public virtual int usp_InsertBookDisplays(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertBookDisplays", bookIDParameter);
        }
    
        public virtual int usp_InsertFilterTimeRange(Nullable<int> filterID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFilterTimeRange", filterIDParameter);
        }
    
        public virtual int usp_InsertFilterValueRange(Nullable<int> filterID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFilterValueRange", filterIDParameter);
        }
    
        public virtual int usp_InsertMessageLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertMessageLog");
        }
    
        public virtual int usp_InsertModelInputAndCoeff(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertModelInputAndCoeff", modelIDParameter);
        }
    
        public virtual int usp_InsertModelTemplate(ObjectParameter modelTemplateID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertModelTemplate", modelTemplateID);
        }
    
        public virtual int usp_InsertMultipleObjectCategoryList(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertMultipleObjectCategoryList", typeParameter);
        }
    
        public virtual int usp_InsertNewPlantObjectVariable(string name, string description, Nullable<int> variableTypeID, Nullable<int> plantObjectTypeID, ObjectParameter found)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            var plantObjectTypeIDParameter = plantObjectTypeID.HasValue ?
                new ObjectParameter("PlantObjectTypeID", plantObjectTypeID) :
                new ObjectParameter("PlantObjectTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewPlantObjectVariable", nameParameter, descriptionParameter, variableTypeIDParameter, plantObjectTypeIDParameter, found);
        }
    
        public virtual int usp_InsertNewUser(string userDomainName, string userName, Nullable<int> userLevel, string userAlias, Nullable<int> position)
        {
            var userDomainNameParameter = userDomainName != null ?
                new ObjectParameter("UserDomainName", userDomainName) :
                new ObjectParameter("UserDomainName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userLevelParameter = userLevel.HasValue ?
                new ObjectParameter("UserLevel", userLevel) :
                new ObjectParameter("UserLevel", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("UserAlias", userAlias) :
                new ObjectParameter("UserAlias", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewUser", userDomainNameParameter, userNameParameter, userLevelParameter, userAliasParameter, positionParameter);
        }
    
        public virtual int usp_InsertNewVariable(ObjectParameter newVariableID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewVariable", newVariableID);
        }
    
        public virtual int usp_InsertObjectCategoryList(Nullable<int> categoryID, Nullable<int> objectID, string type, Nullable<int> actionType)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertObjectCategoryList", categoryIDParameter, objectIDParameter, typeParameter, actionTypeParameter);
        }
    
        public virtual int usp_MasterVariableInsert(string name, string desc, Nullable<int> plantComp, Nullable<int> variableType)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var plantCompParameter = plantComp.HasValue ?
                new ObjectParameter("plantComp", plantComp) :
                new ObjectParameter("plantComp", typeof(int));
    
            var variableTypeParameter = variableType.HasValue ?
                new ObjectParameter("variableType", variableType) :
                new ObjectParameter("variableType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MasterVariableInsert", nameParameter, descParameter, plantCompParameter, variableTypeParameter);
        }
    
        public virtual int usp_MasterVariableUpdate(Nullable<int> id, string name, string desc, Nullable<int> plantComp, Nullable<int> variableType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var plantCompParameter = plantComp.HasValue ?
                new ObjectParameter("plantComp", plantComp) :
                new ObjectParameter("plantComp", typeof(int));
    
            var variableTypeParameter = variableType.HasValue ?
                new ObjectParameter("variableType", variableType) :
                new ObjectParameter("variableType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MasterVariableUpdate", idParameter, nameParameter, descParameter, plantCompParameter, variableTypeParameter);
        }
    
        public virtual int usp_PlantModifyVriableCheckBox(Nullable<int> chkbxVal, Nullable<int> rowInx)
        {
            var chkbxValParameter = chkbxVal.HasValue ?
                new ObjectParameter("chkbxVal", chkbxVal) :
                new ObjectParameter("chkbxVal", typeof(int));
    
            var rowInxParameter = rowInx.HasValue ?
                new ObjectParameter("rowInx", rowInx) :
                new ObjectParameter("rowInx", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PlantModifyVriableCheckBox", chkbxValParameter, rowInxParameter);
        }
    
        public virtual int usp_RenameBook(string newName, Nullable<int> bookID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameBook", newNameParameter, bookIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_RenameChart(string newName, Nullable<int> chartID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameChart", newNameParameter, chartIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_RenameDisplay(string newName, Nullable<int> displayID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameDisplay", newNameParameter, displayIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_RenameFilter(string newName, Nullable<int> filterID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameFilter", newNameParameter, filterIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_RenameHealthCheck(string newName, Nullable<int> healthCheckID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameHealthCheck", newNameParameter, healthCheckIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_RenameLayoutPanel(string newName, Nullable<int> layoutPanelID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var layoutPanelIDParameter = layoutPanelID.HasValue ?
                new ObjectParameter("LayoutPanelID", layoutPanelID) :
                new ObjectParameter("LayoutPanelID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameLayoutPanel", newNameParameter, layoutPanelIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_RenameModel(string newName, Nullable<int> modelID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameModel", newNameParameter, modelIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_RenameModelTemplate(string newName, Nullable<int> modelID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameModelTemplate", newNameParameter, modelIDParameter, found);
        }
    
        public virtual int usp_RenameVariableTable(string newName, Nullable<int> gridID, Nullable<int> userID, ObjectParameter found)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RenameVariableTable", newNameParameter, gridIDParameter, userIDParameter, found);
        }
    
        public virtual int usp_SaveMultipleModels(Nullable<int> userID, Nullable<int> variableCount, Nullable<int> filterID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var variableCountParameter = variableCount.HasValue ?
                new ObjectParameter("VariableCount", variableCount) :
                new ObjectParameter("VariableCount", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SaveMultipleModels", userIDParameter, variableCountParameter, filterIDParameter);
        }
    
        public virtual int usp_UpdateCategory(string name, Nullable<int> position, Nullable<int> categoryID, Nullable<byte> userID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCategory", nameParameter, positionParameter, categoryIDParameter, userIDParameter);
        }
    
        public virtual int usp_UpdateChartProperties(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateChartProperties", chartIDParameter);
        }
    
        public virtual int usp_UpdateChartProperties2(Nullable<int> chartID)
        {
            var chartIDParameter = chartID.HasValue ?
                new ObjectParameter("ChartID", chartID) :
                new ObjectParameter("ChartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateChartProperties2", chartIDParameter);
        }
    
        public virtual int usp_UpdateDisplay(Nullable<int> displayID, Nullable<int> userID, string name, Nullable<int> rows, Nullable<int> columns, Nullable<int> minRowHeight, Nullable<int> filterID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rowsParameter = rows.HasValue ?
                new ObjectParameter("Rows", rows) :
                new ObjectParameter("Rows", typeof(int));
    
            var columnsParameter = columns.HasValue ?
                new ObjectParameter("Columns", columns) :
                new ObjectParameter("Columns", typeof(int));
    
            var minRowHeightParameter = minRowHeight.HasValue ?
                new ObjectParameter("MinRowHeight", minRowHeight) :
                new ObjectParameter("MinRowHeight", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDisplay", displayIDParameter, userIDParameter, nameParameter, rowsParameter, columnsParameter, minRowHeightParameter, filterIDParameter);
        }
    
        public virtual int usp_UpdateDisplayObjects(Nullable<int> displayID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDisplayObjects", displayIDParameter);
        }
    
        public virtual int usp_UpdateDisplayWithObject(Nullable<int> displayID, Nullable<int> row, Nullable<int> column, Nullable<int> displayObjectID, Nullable<int> displayObjectTypeID)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(int));
    
            var columnParameter = column.HasValue ?
                new ObjectParameter("Column", column) :
                new ObjectParameter("Column", typeof(int));
    
            var displayObjectIDParameter = displayObjectID.HasValue ?
                new ObjectParameter("DisplayObjectID", displayObjectID) :
                new ObjectParameter("DisplayObjectID", typeof(int));
    
            var displayObjectTypeIDParameter = displayObjectTypeID.HasValue ?
                new ObjectParameter("DisplayObjectTypeID", displayObjectTypeID) :
                new ObjectParameter("DisplayObjectTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDisplayWithObject", displayIDParameter, rowParameter, columnParameter, displayObjectIDParameter, displayObjectTypeIDParameter);
        }
    
        public virtual int usp_UpdateDisplayWithSwappedObjects(Nullable<int> displayID, Nullable<int> displayObject1ID, Nullable<int> displayObject2ID, Nullable<int> row1, Nullable<int> col1, Nullable<int> row2, Nullable<int> col2)
        {
            var displayIDParameter = displayID.HasValue ?
                new ObjectParameter("DisplayID", displayID) :
                new ObjectParameter("DisplayID", typeof(int));
    
            var displayObject1IDParameter = displayObject1ID.HasValue ?
                new ObjectParameter("DisplayObject1ID", displayObject1ID) :
                new ObjectParameter("DisplayObject1ID", typeof(int));
    
            var displayObject2IDParameter = displayObject2ID.HasValue ?
                new ObjectParameter("DisplayObject2ID", displayObject2ID) :
                new ObjectParameter("DisplayObject2ID", typeof(int));
    
            var row1Parameter = row1.HasValue ?
                new ObjectParameter("Row1", row1) :
                new ObjectParameter("Row1", typeof(int));
    
            var col1Parameter = col1.HasValue ?
                new ObjectParameter("Col1", col1) :
                new ObjectParameter("Col1", typeof(int));
    
            var row2Parameter = row2.HasValue ?
                new ObjectParameter("Row2", row2) :
                new ObjectParameter("Row2", typeof(int));
    
            var col2Parameter = col2.HasValue ?
                new ObjectParameter("Col2", col2) :
                new ObjectParameter("Col2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDisplayWithSwappedObjects", displayIDParameter, displayObject1IDParameter, displayObject2IDParameter, row1Parameter, col1Parameter, row2Parameter, col2Parameter);
        }
    
        public virtual int usp_UpdateFilterProperties(Nullable<int> filterID)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFilterProperties", filterIDParameter);
        }
    
        public virtual int usp_UpdateGridVariables(Nullable<int> gridID)
        {
            var gridIDParameter = gridID.HasValue ?
                new ObjectParameter("GridID", gridID) :
                new ObjectParameter("GridID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateGridVariables", gridIDParameter);
        }
    
        public virtual int usp_UpdateHealthCheckCompare(Nullable<int> healthCheckID, Nullable<int> modelVariableID, Nullable<int> compareVariableID)
        {
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            var modelVariableIDParameter = modelVariableID.HasValue ?
                new ObjectParameter("ModelVariableID", modelVariableID) :
                new ObjectParameter("ModelVariableID", typeof(int));
    
            var compareVariableIDParameter = compareVariableID.HasValue ?
                new ObjectParameter("CompareVariableID", compareVariableID) :
                new ObjectParameter("CompareVariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateHealthCheckCompare", healthCheckIDParameter, modelVariableIDParameter, compareVariableIDParameter);
        }
    
        public virtual int usp_UpdateHealthCheckProperties(Nullable<int> healthCheckID)
        {
            var healthCheckIDParameter = healthCheckID.HasValue ?
                new ObjectParameter("HealthCheckID", healthCheckID) :
                new ObjectParameter("HealthCheckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateHealthCheckProperties", healthCheckIDParameter);
        }
    
        public virtual int usp_UpdateHealthCheckVisible(Nullable<bool> visible)
        {
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("Visible", visible) :
                new ObjectParameter("Visible", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateHealthCheckVisible", visibleParameter);
        }
    
        public virtual int usp_UpdateLayoutPanel(Nullable<int> layoutPanelID, string name, byte[] layoutImage, Nullable<int> panelWidth, Nullable<int> panelHeight)
        {
            var layoutPanelIDParameter = layoutPanelID.HasValue ?
                new ObjectParameter("LayoutPanelID", layoutPanelID) :
                new ObjectParameter("LayoutPanelID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var layoutImageParameter = layoutImage != null ?
                new ObjectParameter("LayoutImage", layoutImage) :
                new ObjectParameter("LayoutImage", typeof(byte[]));
    
            var panelWidthParameter = panelWidth.HasValue ?
                new ObjectParameter("PanelWidth", panelWidth) :
                new ObjectParameter("PanelWidth", typeof(int));
    
            var panelHeightParameter = panelHeight.HasValue ?
                new ObjectParameter("PanelHeight", panelHeight) :
                new ObjectParameter("PanelHeight", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateLayoutPanel", layoutPanelIDParameter, nameParameter, layoutImageParameter, panelWidthParameter, panelHeightParameter);
        }
    
        public virtual int usp_UpdateLayoutPanelObjects(Nullable<int> layoutPanelID)
        {
            var layoutPanelIDParameter = layoutPanelID.HasValue ?
                new ObjectParameter("LayoutPanelID", layoutPanelID) :
                new ObjectParameter("LayoutPanelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateLayoutPanelObjects", layoutPanelIDParameter);
        }
    
        public virtual int usp_UpdateModelFilter(Nullable<int> modelID, Nullable<int> filterID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateModelFilter", modelIDParameter, filterIDParameter);
        }
    
        public virtual int usp_UpdateModelProperties(Nullable<int> modelID, ObjectParameter newModelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateModelProperties", modelIDParameter, newModelID);
        }
    
        public virtual int usp_UpdateModelTemplateProperties(Nullable<int> modelTemplateID)
        {
            var modelTemplateIDParameter = modelTemplateID.HasValue ?
                new ObjectParameter("ModelTemplateID", modelTemplateID) :
                new ObjectParameter("ModelTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateModelTemplateProperties", modelTemplateIDParameter);
        }
    
        public virtual int usp_UpdateModifyVariableDatagrid(string name, string engUnits, string tag, Nullable<int> siteID, Nullable<int> block, Nullable<int> plantObjectTypeID, string unitNumber, Nullable<int> masterVariableID, Nullable<int> variableTypeID, Nullable<int> sourceID, Nullable<int> forecastID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var engUnitsParameter = engUnits != null ?
                new ObjectParameter("EngUnits", engUnits) :
                new ObjectParameter("EngUnits", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("block", block) :
                new ObjectParameter("block", typeof(int));
    
            var plantObjectTypeIDParameter = plantObjectTypeID.HasValue ?
                new ObjectParameter("PlantObjectTypeID", plantObjectTypeID) :
                new ObjectParameter("PlantObjectTypeID", typeof(int));
    
            var unitNumberParameter = unitNumber != null ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(string));
    
            var masterVariableIDParameter = masterVariableID.HasValue ?
                new ObjectParameter("MasterVariableID", masterVariableID) :
                new ObjectParameter("MasterVariableID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var forecastIDParameter = forecastID.HasValue ?
                new ObjectParameter("ForecastID", forecastID) :
                new ObjectParameter("ForecastID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateModifyVariableDatagrid", nameParameter, engUnitsParameter, tagParameter, siteIDParameter, blockParameter, plantObjectTypeIDParameter, unitNumberParameter, masterVariableIDParameter, variableTypeIDParameter, sourceIDParameter, forecastIDParameter);
        }
    
        public virtual int usp_UpdateModifyVariableDatagrid_edit(string name, string engUnits, string tag, Nullable<int> siteID, Nullable<int> block, Nullable<int> plantObjectTypeID, string unitNumber, Nullable<int> variableTypeID, Nullable<int> sourceID, Nullable<int> forecastID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var engUnitsParameter = engUnits != null ?
                new ObjectParameter("EngUnits", engUnits) :
                new ObjectParameter("EngUnits", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("block", block) :
                new ObjectParameter("block", typeof(int));
    
            var plantObjectTypeIDParameter = plantObjectTypeID.HasValue ?
                new ObjectParameter("PlantObjectTypeID", plantObjectTypeID) :
                new ObjectParameter("PlantObjectTypeID", typeof(int));
    
            var unitNumberParameter = unitNumber != null ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(string));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var forecastIDParameter = forecastID.HasValue ?
                new ObjectParameter("ForecastID", forecastID) :
                new ObjectParameter("ForecastID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateModifyVariableDatagrid_edit", nameParameter, engUnitsParameter, tagParameter, siteIDParameter, blockParameter, plantObjectTypeIDParameter, unitNumberParameter, variableTypeIDParameter, sourceIDParameter, forecastIDParameter);
        }
    
        public virtual int usp_UpdatePanelSettings(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePanelSettings", userIDParameter);
        }
    
        public virtual int usp_UpdatePlantObjectVariable(Nullable<int> plantObjectTypeID, Nullable<int> plantObjectID, string name, string description, Nullable<int> variableTypeID)
        {
            var plantObjectTypeIDParameter = plantObjectTypeID.HasValue ?
                new ObjectParameter("PlantObjectTypeID", plantObjectTypeID) :
                new ObjectParameter("PlantObjectTypeID", typeof(int));
    
            var plantObjectIDParameter = plantObjectID.HasValue ?
                new ObjectParameter("PlantObjectID", plantObjectID) :
                new ObjectParameter("PlantObjectID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePlantObjectVariable", plantObjectTypeIDParameter, plantObjectIDParameter, nameParameter, descriptionParameter, variableTypeIDParameter);
        }
    
        public virtual int usp_UpdateRelativeFilter(Nullable<int> filterID, Nullable<bool> relative, Nullable<int> start, Nullable<int> finish)
        {
            var filterIDParameter = filterID.HasValue ?
                new ObjectParameter("FilterID", filterID) :
                new ObjectParameter("FilterID", typeof(int));
    
            var relativeParameter = relative.HasValue ?
                new ObjectParameter("Relative", relative) :
                new ObjectParameter("Relative", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var finishParameter = finish.HasValue ?
                new ObjectParameter("Finish", finish) :
                new ObjectParameter("Finish", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRelativeFilter", filterIDParameter, relativeParameter, startParameter, finishParameter);
        }
    
        public virtual int usp_UpdateUser(Nullable<int> userID, string userDomainName, string userName, Nullable<int> userLevel, string userAlias, Nullable<int> position)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userDomainNameParameter = userDomainName != null ?
                new ObjectParameter("UserDomainName", userDomainName) :
                new ObjectParameter("UserDomainName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userLevelParameter = userLevel.HasValue ?
                new ObjectParameter("UserLevel", userLevel) :
                new ObjectParameter("UserLevel", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("UserAlias", userAlias) :
                new ObjectParameter("UserAlias", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUser", userIDParameter, userDomainNameParameter, userNameParameter, userLevelParameter, userAliasParameter, positionParameter);
        }
    
        public virtual int usp_UpdateUserLastLogin(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserLastLogin", userIDParameter);
        }
    
        public virtual int usp_UpdateUserVersion(Nullable<int> userID, string version)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserVersion", userIDParameter, versionParameter);
        }
    
        public virtual int usp_UpdateVariable(string name, string engUnits, Nullable<int> variableTypeID, Nullable<int> siteID, Nullable<int> blockID, Nullable<int> plantObjectTypeID, Nullable<int> plantObjectID, Nullable<int> plantObjectVariableID, Nullable<int> variableID, Nullable<int> local)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var engUnitsParameter = engUnits != null ?
                new ObjectParameter("EngUnits", engUnits) :
                new ObjectParameter("EngUnits", typeof(string));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            var plantObjectTypeIDParameter = plantObjectTypeID.HasValue ?
                new ObjectParameter("PlantObjectTypeID", plantObjectTypeID) :
                new ObjectParameter("PlantObjectTypeID", typeof(int));
    
            var plantObjectIDParameter = plantObjectID.HasValue ?
                new ObjectParameter("PlantObjectID", plantObjectID) :
                new ObjectParameter("PlantObjectID", typeof(int));
    
            var plantObjectVariableIDParameter = plantObjectVariableID.HasValue ?
                new ObjectParameter("PlantObjectVariableID", plantObjectVariableID) :
                new ObjectParameter("PlantObjectVariableID", typeof(int));
    
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            var localParameter = local.HasValue ?
                new ObjectParameter("Local", local) :
                new ObjectParameter("Local", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateVariable", nameParameter, engUnitsParameter, variableTypeIDParameter, siteIDParameter, blockIDParameter, plantObjectTypeIDParameter, plantObjectIDParameter, plantObjectVariableIDParameter, variableIDParameter, localParameter);
        }
    
        public virtual int usp_UpdateVariablePoint(Nullable<int> variableID)
        {
            var variableIDParameter = variableID.HasValue ?
                new ObjectParameter("VariableID", variableID) :
                new ObjectParameter("VariableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateVariablePoint", variableIDParameter);
        }
    
        public virtual int usp_UpdateVariablePointValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateVariablePointValues");
        }
    
        public virtual int usp_VariableMasterInsert(ObjectParameter resultMsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VariableMasterInsert", resultMsg);
        }
    
        public virtual int usp_VariableMasterUpdate(ObjectParameter resultMsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VariableMasterUpdate", resultMsg);
        }
    
        public virtual int usp_VariableTypeBulkInsert(ObjectParameter resultMsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VariableTypeBulkInsert", resultMsg);
        }
    
        public virtual int usp_VariableTypeBulkUpdate(ObjectParameter resultMsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VariableTypeBulkUpdate", resultMsg);
        }
    
        public virtual int usp_VariableTypeInsert(string name, string acronym, string engUnits)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var acronymParameter = acronym != null ?
                new ObjectParameter("acronym", acronym) :
                new ObjectParameter("acronym", typeof(string));
    
            var engUnitsParameter = engUnits != null ?
                new ObjectParameter("engUnits", engUnits) :
                new ObjectParameter("engUnits", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VariableTypeInsert", nameParameter, acronymParameter, engUnitsParameter);
        }
    
        public virtual int usp_VariableTypeUpdate(Nullable<int> id, string name, string acronym, string engUnits)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var acronymParameter = acronym != null ?
                new ObjectParameter("acronym", acronym) :
                new ObjectParameter("acronym", typeof(string));
    
            var engUnitsParameter = engUnits != null ?
                new ObjectParameter("engUnits", engUnits) :
                new ObjectParameter("engUnits", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VariableTypeUpdate", idParameter, nameParameter, acronymParameter, engUnitsParameter);
        }
    }
}
